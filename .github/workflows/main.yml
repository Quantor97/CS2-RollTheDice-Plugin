name: .NET CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.x' # Adjust the version as per your project requirement

    - name: Extract Module Info from CS file
      id: module_info
      run: |
        CS_FILE=$(find . -name '*.cs' -print -quit)
        MODULE_NAME_RAW=$(grep -oP '(?<=public override string ModuleName => ").*(?=";)' "$CS_FILE")
        MODULE_NAME="${MODULE_NAME_RAW// /}" # Remove all spaces from the module name
        MODULE_VERSION=$(grep -oP '(?<=public override string ModuleVersion => ").*(?=";)' "$CS_FILE")
        MODULE_VERSION="${MODULE_VERSION// /}" # Remove all spaces from the module version
        echo "Module Name: $MODULE_NAME"
        echo "Module Version: $MODULE_VERSION"
        echo "::set-output name=module_name::$MODULE_NAME"
        echo "::set-output name=module_version::$MODULE_VERSION"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --output ./build

    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal

    - name: Publish
      run: dotnet publish --configuration Release --output ./publish

    - name: Check and Archive DLL
      run: |
        MODULE_NAME="${{ steps.module_info.outputs.module_name }}"
        MODULE_VERSION="${{ steps.module_info.outputs.module_version }}"
        DLL_PATH="./publish/${MODULE_NAME}.dll" # Update this path if necessary
        ZIP_PATH="./release/${MODULE_NAME}-${MODULE_VERSION}.zip"
        DEST_DIR="addons/counterstrikesharp/plugins/${MODULE_NAME}/"
        
        # Ensure the DLL exists
        if [ ! -f "$DLL_PATH" ]; then
            echo "DLL not found: $DLL_PATH"
            exit 1
        fi
    
        # Create the directory structure for the ZIP
        mkdir -p "$(dirname "$ZIP_PATH")/$DEST_DIR"
        
        # Copy the DLL to the new directory structure
        cp "$DLL_PATH" "$(dirname "$ZIP_PATH")/$DEST_DIR"
    
        # Archive the directory structure with the DLL
        (cd "$(dirname "$ZIP_PATH")" && zip -r "$(basename "$ZIP_PATH")" "$(basename "$DEST_DIR")")



    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.module_info.outputs.module_version }}
        release_name: Release ${{ steps.module_info.outputs.module_version }}
        draft: false
        prerelease: false
        body: |
          Release of ${{ steps.module_info.outputs.module_name }} version ${{ steps.module_info.outputs.module_version }}.

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/${{ steps.module_info.outputs.module_name }}-${{ steps.module_info.outputs.module_version }}.zip
        asset_name: ${{ steps.module_info.outputs.module_name }}-${{ steps.module_info.outputs.module_version }}.zip
        asset_content_type: application/zip
